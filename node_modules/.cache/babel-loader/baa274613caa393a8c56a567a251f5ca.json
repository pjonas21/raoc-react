{"ast":null,"code":"var _jsxFileName = \"C:\\\\ProjetosProgramacao\\\\ReactJS\\\\webappprojeto\\\\src\\\\components\\\\Charts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport fireDb from \"../firebase\";\nimport Chart from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Charts = () => {\n  _s();\n\n  const [dadosOcorrencias, setDadosOcorrencias] = useState({});\n  const dadosOc = Object.keys(dadosOcorrencias).map(function (oc) {\n    return dadosOcorrencias[oc];\n  });\n  var myJsonString = JSON.stringify(dadosOc);\n  useEffect(() => {\n    fireDb.firestore().collection(\"ocgeral\").get().then(snapshot => {\n      const dados = [];\n      snapshot.forEach(doc => {\n        const data = doc.data();\n        dados.push(data);\n      });\n      setDadosOcorrencias(dados); //console.log(dados);\n    }).catch(error => console.log(error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Chart, {\n      width: 400,\n      height: \"300px\",\n      chartType: \"AreaChart\",\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this),\n      data: [[\"Year\", \"Sales\", \"Expenses\"], [\"2013\", 1000, 400], [\"2014\", 1170, 460], [\"2015\", 660, 1120], [\"2016\", 1030, 540]],\n      options: {\n        title: \"Company Performance\",\n        hAxis: {\n          title: \"Year\",\n          titleTextStyle: {\n            color: \"#333\"\n          }\n        },\n        vAxis: {\n          minValue: 0\n        },\n        // For the legend to fit, we make the chart area smaller\n        chartArea: {\n          width: \"50%\",\n          height: \"70%\"\n        } // lineWidth: 25\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      width: 400,\n      height: 300,\n      chartType: \"ColumnChart\",\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this),\n      data: [[\"City\", \"2010 Population\", \"2000 Population\"], [\"New York City, NY\", 8175000, 8008000], [\"Los Angeles, CA\", 3792000, 3694000], [\"Chicago, IL\", 2695000, 2896000], [\"Houston, TX\", 2099000, 1953000], [\"Philadelphia, PA\", 1526000, 1517000]],\n      options: {\n        title: \"Population of Largest U.S. Cities\",\n        chartArea: {\n          width: \"30%\"\n        },\n        hAxis: {\n          title: \"Total Population\",\n          minValue: 0\n        },\n        vAxis: {\n          title: \"City\"\n        }\n      },\n      legendToggle: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Charts, \"6onOpftiMDU7SAhnrQUzL97igUY=\");\n\n_c = Charts;\nexport default Charts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"sources":["C:/ProjetosProgramacao/ReactJS/webappprojeto/src/components/Charts.js"],"names":["React","useState","useEffect","fireDb","Chart","Charts","dadosOcorrencias","setDadosOcorrencias","dadosOc","Object","keys","map","oc","myJsonString","JSON","stringify","firestore","collection","get","then","snapshot","dados","forEach","doc","data","push","catch","error","console","log","title","hAxis","titleTextStyle","color","vAxis","minValue","chartArea","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport fireDb from \"../firebase\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nconst Charts = () => {\r\n  const [dadosOcorrencias, setDadosOcorrencias] = useState({});\r\n\r\n  const dadosOc = Object.keys(dadosOcorrencias).map(function (oc) {\r\n    return dadosOcorrencias[oc];\r\n  });\r\n\r\n  var myJsonString = JSON.stringify(dadosOc);\r\n\r\n  useEffect(() => {\r\n    fireDb\r\n      .firestore()\r\n      .collection(\"ocgeral\")\r\n      .get()\r\n      .then((snapshot) => {\r\n        const dados = [];\r\n        snapshot.forEach((doc) => {\r\n          const data = doc.data();\r\n          dados.push(data);\r\n        });\r\n        setDadosOcorrencias(dados);\r\n        //console.log(dados);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Chart\r\n        width={400}\r\n        height={\"300px\"}\r\n        chartType=\"AreaChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={[\r\n          [\"Year\", \"Sales\", \"Expenses\"],\r\n          [\"2013\", 1000, 400],\r\n          [\"2014\", 1170, 460],\r\n          [\"2015\", 660, 1120],\r\n          [\"2016\", 1030, 540],\r\n        ]}\r\n        options={{\r\n          title: \"Company Performance\",\r\n          hAxis: { title: \"Year\", titleTextStyle: { color: \"#333\" } },\r\n          vAxis: { minValue: 0 },\r\n          // For the legend to fit, we make the chart area smaller\r\n          chartArea: { width: \"50%\", height: \"70%\" },\r\n          // lineWidth: 25\r\n        }}\r\n      />\r\n      <Chart\r\n        width={400}\r\n        height={300}\r\n        chartType=\"ColumnChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={[\r\n          [\"City\", \"2010 Population\", \"2000 Population\"],\r\n          [\"New York City, NY\", 8175000, 8008000],\r\n          [\"Los Angeles, CA\", 3792000, 3694000],\r\n          [\"Chicago, IL\", 2695000, 2896000],\r\n          [\"Houston, TX\", 2099000, 1953000],\r\n          [\"Philadelphia, PA\", 1526000, 1517000],\r\n        ]}\r\n        options={{\r\n          title: \"Population of Largest U.S. Cities\",\r\n          chartArea: { width: \"30%\" },\r\n          hAxis: {\r\n            title: \"Total Population\",\r\n            minValue: 0,\r\n          },\r\n          vAxis: {\r\n            title: \"City\",\r\n          },\r\n        }}\r\n        legendToggle\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Charts;\r\n"]},"metadata":{},"sourceType":"module"}